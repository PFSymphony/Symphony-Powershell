    # Welcome to the Symphony Bot Collection

    # This PowerShell bot is brought to you by Symphony's Solutions Architect Team
    # Based on the pioneering work in PowerShell by Patrick O'Brien
    # Guided by the expertise of our API guy Mike Scannell
    # Under the realm of our fearless leader Kevin Byrne

    # Author: JoAnne Mann
    # Date: 9.8.2017
    # Copyright Symphony Communications LLC 2017 All Rights Reserved
    # This script is distributed as-is and is meant to be a template to assist with administring a Symphony pod.

    # This is a Windows PowerShell Script and it was tested on Powershell 5.1 which can be found here:
    #    https://www.microsoft.com/en-us/download/details.aspx?id=54616
    # You may also enjoy the Windows Powershell Ingtegrated Script Environment (ISE) described here:
    #    https://msdn.microsoft.com/en-us/powershell/scripting/core-powershell/ise/introducing-the-windows-powershell-ise
    # You must run "Set-ExecutionPolicy RemoteSigned" as described here:
    #    http://windowsitpro.com/powershell/running-powershell-scripts-easy-1-2-3

    # To successfully authorize, you must upload the p12 into the Certificate Manager in Windows.  To do this, simply
    #  click on the p12 file in File Explorer, and accept all of the defaults when the Certificate manager opens.

    # Modify the "Fill in these Variables" section below for your specific pod and environment

    #                                ,,                       
    #                                 ||                       
    #      _-_, '\\/\\ \\/\\/\\ -_-_  ||/\\  /'\\ \\/\\ '\\/\\ 
    #     ||_.   || ;' || || || || \\ || || || || || ||  || ;' 
    #      ~ ||  ||/   || || || || || || || || || || ||  ||/   
    #     ,-_-   |/    \\ \\ \\ ||-'  \\ |/ \\,/  \\ \\  |/    
    #           (               |/      _/              (      
    #            -_-            '                        -_- 

# Notes on the Script

       # This script was designed to read a csv file of user ids with one id per line and change the user name to the second user name.

   # A customer is changing their domain name and would like assistance renaming all of their accounts and the email addresses in their accounts.  
   # Fields we will be changing:
   #   Username
   #   Email
   # This script mines the pod and creates a csv file includes 2 fields:
   #   currentEmail
   #   newEmail
   # The csv file can be automatically generated by the CreateCSVForUserNameChange.ps1.  
   # The Username and Email fields can be changed in an entire pod using the csv file generated by ChangeUserNames.ps1
   # Edit the file and enter the values of currentEmail and newEmail and it will go through the pod and pull out all 
   # of the users with a name which matches the currentEmail in both the username and email fields, and then converts the 
   # email using the newEmail domain, writing it to a csv file which can be used as input to the ChangeUserNames.ps1 script.  
   # This intermediary step is important so that the admin of the pod can review the csv file for accuracy; they have the 
   # opportunity to comment out users or manipulate the file prior to using it as input to ChangeUserNames.ps1.

   # Example:
   #   user1@abc.com,user1@xyz.com
   #   user2@abc.com,user2@xyz.com


# Fill in these Variables

    $certificateFileAndPath =     "C:\mycerts\bot.user1.p12"
    $certificateFilePassword =    "changeit"

    $sessionAuthUrl =  "https://mycompany-api.symphony.com/sessionauth/v1/authenticate"
    $podUrl =  "https://mycompany.symphony.com"


    #If you have an outbound proxy then uncomment this line and add in your HTTP proxy value such as "http://myproxy:8888"
    #currently this only supports unauthenticating proxys 
    #$proxy = "http://myproxy:8888/"

    #$outpoutPath =   "c:\temp\"
    $outpoutPath = "."

    #Define the old email domain we want to change
    $currentDomain ="mycompany.com"
    $newDomain = "newcompanydomain.com"

# Script Body

  $userCount=0
  $totalCount=0
  $userCSVCount=0

Clear-Host
Write-Host
Write-Host
Write-Host
Write-Host
Write-Host
Write-Host
$beforeTime = Get-Date
Write-Host "Starting at " $beforeTime.ToLocalTime()



# Get p12 certificate thumbprint
try {
        $certificateObject = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $certificateObject.Import($certificateFileAndPath, $certificateFilePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::DefaultKeySet)
        #Write-Host $certificateObject.Thumbprint

} catch {

    Write-Host "ERROR: Certificate read failed with error '$($_.Exception.InnerException)'" -ForegroundColor white -BackgroundColor red
    exit
}



# Get SessionAuth token
try {
        if ($proxy) { $sessionAuthToken = (Invoke-RestMethod -Method POST -Uri $sessionAuthUrl -Proxy $proxy -CertificateThumbprint $certificateObject.Thumbprint).token }
    
        else        { $sessionAuthToken = (Invoke-RestMethod -Method POST -Uri $sessionAuthUrl -CertificateThumbprint $certificateObject.Thumbprint).token }
    }

 catch {

        Write-Host "ERROR: REST call to sessionauth endpoint failed with error '$($_.Exception.Status) - $($_.Exception)'" -ForegroundColor white -BackgroundColor red
        Write-Host "Current endpoint: '$sessionAuthUrl'" -ForegroundColor white -BackgroundColor red
        exit
       }

# Get Full Symphony userlist
$hdrs = @{}
$hdrs.Add("sessionToken",$sessionAuthToken)

try {
        if ($proxy) {    $fullUserList = Invoke-RestMethod -Method GET -Headers $hdrs  -Proxy $proxy -Uri "$podUrl/pod/v1/admin/user/list"}
        else        {    $fullUserList = Invoke-RestMethod -Method GET -Headers $hdrs -Uri "$podUrl/pod/v1/admin/user/list"}

} catch {

    Write-Host "ERROR: REST call to pod endpoint failed with error '$($_.Exception.Status) - $($_.Exception)'" -ForegroundColor white -BackgroundColor red
    Write-Host "Current endpoint: '$podUrl/pod/v1/admin/user/list'" -ForegroundColor white -BackgroundColor red

    exit
}

$userCount=$fullUserList.Count

#Prep for output of CSV
$linuxOrigin=[timezone]::CurrentTimeZone.ToLocalTime([datetime]'1/1/1970') 
$formattedBeforeTime = Get-Date -Format o

$filename = $formattedBeforeTime | foreach {$_ -replace ":", "."} | foreach {$_ -replace "-", "_"}
$fullPathFilename = "$outpoutPath\SymphonyUserExport_$filename.csv"

# Write the header to the file
$header=[string]"#currentEmail,newEmail"
try {
  $header > $fullPathFilename
} catch {
  Write-Host "ERROR: CSV File Write failed with error '$($_.Exception.Message)'" -ForegroundColor white -BackgroundColor red
  exit
}

# Loop on the user list  to get the user detail
$fullUserList | foreach { 

   $totalCount=$totalCount+1
   
   if ($proxy) { $userDetail = Invoke-RestMethod -Method GET -Headers $hdrs -Proxy $proxy -Uri "$podUrl/pod/v1/admin/user/$_" }
   else        { $userDetail = Invoke-RestMethod -Method GET -Headers $hdrs -Uri "$podUrl/pod/v1/admin/user/$_" } 

   # Symphony doesn't send a user.userSystemInfo.createdBy for original system accounts so we need to check for that
   if($userDetail.userSystemInfo.createdBy) {
        $creatorUrl="$podUrl/pod/v1/admin/user/$($userDetail.userSystemInfo.createdBy)"
        #Write-Host $creatorUrl
        if ($proxy) { $creatorDetail = Invoke-RestMethod -Method GET -Headers $hdrs -Proxy $proxy -Uri $creatorUrl }
        else        { $creatorDetail = Invoke-RestMethod -Method GET -Headers $hdrs -Uri $creatorUrl }

        $createdBy=($creatorDetail.userAttributes.userName)
        }
   Else { $createdBy= "SYSTEM" }


  $userName = $userDetail.userAttributes.userName
  $emailAddress=$($userDetail.userAttributes.emailAddress)

  # Does userName match emailAddress?  If not, we have an exception and we won't add it to the csv
  if ($userName -ne $emailAddress) {
     Write-Host "Exception found: User $userName does not match $mailAddress; not writing to CSV"

  } else {

  # Does the email domain have the $currentDomain specified in the intro?  If not, we won't add it to the csv
  if ($username -notmatch $currentDomain) {
    Write-Host "Exception found even though match is $match : Email does not contain currentDomain $currentDomain.  Not writing to CSV."
} else {
     
  $currentEmail = $emailAddress
  $newEmail = $emailAddress -replace $currentDomain,$newDomain
 
  $output ="$currentEmail,$newEmail"
  
  $output  >> $fullPathFilename 
  $userCSVCount++
  Write-Host $output
} 
}

  $count=$fullUserList.Count
  $pctComplete=[math]::Round(($totalCount/$count)*100)
  Write-Progress -Activity "Looping through all Symphony users..." -PercentComplete $pctComplete -CurrentOperation "$pctComplete% complete of $count users" -Status "Please wait."

 } 

  Write-Host "Elapsed time: " (NEW-TIMESPAN –Start $beforeTime –End (Get-Date)) 
                              
  Write-Host ""
  Write-Host $userCount "     Total Users "
  Write-Host $userCSVCount "     Total Users written to CSV " 

  Write-Host "Detailed user data written to '$fullPathFilename'"
