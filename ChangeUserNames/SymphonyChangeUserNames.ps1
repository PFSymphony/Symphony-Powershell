    # Welcome to the Symphony Bot Collection

    # This PowerShell bot is brought to you by Symphony's Solutions Architect Team
    # Based on the pioneering work in PowerShell by Patrick O'Brien
    # Guided by the expertise of our API guy Mike Scannell
    # Under the realm of our fearless leader Kevin Byrne

    # Author: JoAnne Mann
    # Date: 9.8.2017
    # Copyright Symphony Communications LLC 2017 All Rights Reserved
    # This script is distributed as-is and is meant to be a template to assist with administring a Symphony pod.

    # This is a Windows PowerShell Script and it was tested on Powershell 5.1 which can be found here:
    #    https://www.microsoft.com/en-us/download/details.aspx?id=54616
    # You may also enjoy the Windows Powershell Ingtegrated Script Environment (ISE) described here:
    #    https://msdn.microsoft.com/en-us/powershell/scripting/core-powershell/ise/introducing-the-windows-powershell-ise
    # You must run "Set-ExecutionPolicy RemoteSigned" as described here:
    #    http://windowsitpro.com/powershell/running-powershell-scripts-easy-1-2-3

    # To successfully authorize, you must upload the p12 into the Certificate Manager in Windows.  To do this, simply
    #  click on the p12 file in File Explorer, and accept all of the defaults when the Certificate manager opens.

    # Modify the "Fill in these Variables" section below for your specific pod and environment

    #                                ,,                       
    #                                 ||                       
    #      _-_, '\\/\\ \\/\\/\\ -_-_  ||/\\  /'\\ \\/\\ '\\/\\ 
    #     ||_.   || ;' || || || || \\ || || || || || ||  || ;' 
    #      ~ ||  ||/   || || || || || || || || || || ||  ||/   
    #     ,-_-   |/    \\ \\ \\ ||-'  \\ |/ \\,/  \\ \\  |/    
    #           (               |/      _/              (      
    #            -_-            '                        -_- 

    # This script was designed to read a csv file of user ids with one id per line and 
    # change the user name to the second user name.
    
    # This script was designed to read a csv file of user ids with one id per line and 
    # change the user name to the second user name.

   # For a customer who is changing their domain name and would like assistance renaming 
   # all of their accounts and the email addresses in their accounts.  
   # Fields we will be changing:
   #   Username
   #   Email
   # This script accepts a csv file as input which includes 2 fields:
   #   currentEmail
   #   newEmail
   # The csv file can be automatically generated by the CreateCSVForUserNameChange.ps1.  
   # Edit the file and enter the values of currentEmail and newEmail and it will go through the pod and pull out all 
   # of the users with a name which matches the currentEmail in both the username and email fields, and then converts the 
   # email using the newEmail domain, writing it to a csv file which can be used as input to the ChangeUserNames.ps1 script.  
   # This intermediary step is important so that the admin of the pod can review the csv file for accuracy; they have the 
   # opportunity to comment out users or manipulate the file prior to using it as input to ChangeUserNames.ps.

   # Example:
   #   user1@abc.com,user1@xyz.com
   #   user2@abc.com,user2@xyz.com

#Forces PowerShell to use TLS 1.2 as a minimum (requirement since Symphony 1.52)
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
    
# Fill in these Variables

    $certificateFileAndPath =     "C:\mycerts\bot.user1.p12"
    $certificateFilePassword =    "changeit"

    $sessionAuthUrl =  "https://mycompany-api.symphony.com/sessionauth/v1/authenticate"
    $podUrl =  "https://mycompany.symphony.com"

    # CSV file that contains list of usernames
    $UserNamesFile = "SymphonyUserNames.csv"

    #If you have an outbound proxy then uncomment this line and add in your HTTP proxy value such as "http://myproxy:8888"
    #currently this only supports unauthenticating proxys 
    #$proxy = "http://myproxy:8888/"


# Script Body

Clear-Host
Write-Host
Write-Host
Write-Host
Write-Host
Write-Host
Write-Host
$beforeTime = Get-Date
Write-Host "Starting at " $beforeTime.ToLocalTime()

    # Get p12 certificate thumbprint

    try {
            $certificateObject = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
            $certificateObject.Import($certificateFileAndPath, $certificateFilePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::
DefaultKeySet)
            #Write-Host $certificateObject.Thumbprint

    } catch {

        Write-Host "ERROR: Certificate read failed with error '$($_.Exception.InnerException)'" -ForegroundColor white -BackgroundColor red
        exit
    }



    # Get SessionAuth token

    try {
        $sessionAuthToken = (Invoke-RestMethod -Method POST -Uri $sessionAuthUrl -CertificateThumbprint $certificateObject.Thumbprint).token
    } catch {

        Write-Host "failed with error '$($_.CategoryInfo.Reason) - $($_.Exception.Status) - $($_.Exception)'"
        Write-Host "ERROR: REST call to sessionauth endpoint failed with error '$($_.Exception.Status)'" -ForegroundColor white -BackgroundColor red
        Write-Host "Current endpoint: '$sessionAuthUrl'" -ForegroundColor white -BackgroundColor red

        exit
    }

Write-Host "*** Successfully received sessionAuthToken: $sessionAuthToken"

# Define Headers
$hdrs = @{}
$hdrs.Add("sessionToken",$sessionAuthToken)

# Open CSV file and read entries
Write-Host "Opening file $UserNamesFile"
$Names = import-csv "$UserNamesFile" -header email,newEmail 
ForEach ($Name in $Names) {

  $email = $($Name.email)
  $newEmail = $($Name.newEmail)


  # Skip Comments in the csv file
  if ($email.StartsWith("#") -eq  "True" ) {
     Write-Host "Found a comment in csv file: $email.  Skipping."
     Continue;
  }

# Look up ID from email
  try {
        if ($proxy) {    $fullUserList = Invoke-RestMethod -Method GET -Headers $hdrs  -Proxy $proxy -Uri "$podUrl/pod/v1/user?email=$email" }
        else        {    $fullUserList = Invoke-RestMethod -Method GET -Headers $hdrs -Uri "$podUrl/pod/v1/user?email=$email" }


  } catch {

    Write-Host "ERROR: REST call to pod endpoint failed with error '$($_.Exception.Status) - $($_.Exception)'" -ForegroundColor white -BackgroundColor red
    Write-Host "Current endpoint: '$podUrl/pod/v1/admin/user/list'" -ForegroundColor white -BackgroundColor red

  }

$id=$fullUserList.id

# Next if ID is empty
if ( !$id ) {
  Write-Host "UserID for $email is empty; no such user found.  Skipping."
  Continue
}


$DataList = @{}
$DataList.Add("emailAddress",$newEmail)
$DataList.Add("userName",$newEmail)
$json = $DataList | ConvertTo-Json

# Add each entry to the ConversationID
  try {
        if ($proxy) {    $Result = Invoke-RestMethod -Body $json -Method POST -ContentType 'application/json' -Headers $hdrs  -Proxy $proxy -Uri "$podUrl/pod/v1/admin/user/$id/update"}
        else        {    $Result = Invoke-RestMethod -Body $json -Method POST -ContentType 'application/json' -Headers $hdrs -Uri "$podUrl/pod/v1/admin/user/$id/update"}

Write-Host "***** Successfully updated user $email ID $id to new email $newEmail.   Result: $Result"

  } catch {

    Write-Host "ERROR: REST call to pod endpoint failed with error '$($_.Exception.Status) - $($_.Exception)'" -ForegroundColor white -BackgroundColor red
    Write-Host "Current endpoint: '$podUrl/pod/v1/admin/user/$id/update'" -ForegroundColor white -BackgroundColor red
Write-Host "Failed to Add $user ID $id "
  }

Start-Sleep -s 3
}

  Write-Host "Elapsed time: " (NEW-TIMESPAN –Start $beforeTime –End (Get-Date)) 
                              
exit

